name: 'CI'

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  lint:
    name: 'Lint'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          extensions: "json"
          ini-values: "memory_limit=-1"
          php-version: "7.4"

      - name: 'Determine composer cache directory'
        id: composer-cache
        run: echo "::set-output name=directory::$(composer config cache-dir)"

      - name: 'Cache composer dependencies'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.directory }}
          key: 7.4-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: 7.4-composer-

      - name: 'Install dependencies'
        id: deps
        run: |
          echo "::group::composer update"
            composer update --no-progress --ansi
          echo "::endgroup::"

          echo "::group::install phpunit"
            # Required for PhpStan
            vendor/bin/simple-phpunit install
          echo "::endgroup::"

      - name: 'Composer validate'
        if: always() && steps.deps.outcome == 'success'
        run: composer validate --strict

      - name: 'PHP CS Fixer'
        if: always() && steps.deps.outcome == 'success'
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: 'PhpStan'
        if: always() && steps.deps.outcome == 'success'
        run: vendor/bin/phpstan analyse

      - name: 'Lint YAML'
        if: always() && steps.deps.outcome == 'success'
        run: vendor/bin/yaml-lint --parse-tags config tests/fixtures/app/config

      - name: 'Lint Twig'
        if: always() && steps.deps.outcome == 'success'
        run: bin/lint.twig.php templates

  tests:
    name: 'Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      fail-fast: false # don't cancel other matrix jobs on failure
      matrix:
        php: [ '7.4', '8.0' ]

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          extensions: "json"
          ini-values: "memory_limit=-1"
          php-version: "${{ matrix.php }}"

      - name: 'Determine composer cache directory'
        id: composer-cache
        run: echo "::set-output name=directory::$(composer config cache-dir)"

      - name: 'Cache composer dependencies'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.directory }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: 'Fixup Composer'
        if: matrix.php == 8.0
        run: |
          echo "::group::Fixup Composer platform config for third-parties deps not PHP 8 ready yet"
            composer config platform.php 7.4.99
          echo "::endgroup::"

      - name: 'Install dependencies'
        run: |
          echo "::group::composer update"
            composer update --no-progress --ansi
          echo "::endgroup::"

          echo "::group::install phpunit"
            vendor/bin/simple-phpunit install
          echo "::endgroup::"

      - name: 'Run tests'
        run: vendor/bin/simple-phpunit --testdox


  build-doc:
    name: 'Check doc build'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false # don't cancel other matrix jobs on failure

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      # https://github.com/actions/setup-node
      - name: 'Setup node'
        uses: actions/setup-node@v1

      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          extensions: "json"
          ini-values: "memory_limit=-1"
          php-version: "8.0"

      - name: 'Determine composer cache directory'
        id: composer-cache
        working-directory: ./doc/app
        run: echo "::set-output name=directory::$(composer config cache-dir)"

      - name: 'Cache composer dependencies'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.directory }}
          key: composer-${{ hashFiles('./doc/app/**/composer.lock') }}
          restore-keys: composer-

      - name: 'Install dependencies'
        working-directory: ./doc/app
        run: |
          echo "::group::composer install"
            composer install --no-progress --ansi
          echo "::endgroup::"

          echo "::group::npm install"
            npm install --color=always --no-progress
          echo "::endgroup::"

      - name: 'Warmup'
        working-directory: ./doc/app
        run: |
          echo "::group::warmup production env"
            npx encore production --color
            bin/console cache:clear --ansi
            bin/console cache:warmup --ansi
          echo "::endgroup::"
        env:
          APP_ENV: prod
          WEBPACK_PUBLIC_PATH: /Stenope/build

      - name: 'Build static site'
        working-directory: ./doc/app
        run: bin/console stenope:build --no-interaction -vv --ansi
        env:
          APP_ENV: prod
          ROUTER_DEFAULT_URI: https://stenopephp.github.io/Stenope
